:Class Kafka

    :field private shared sharedlib←'kafka'
    :field private shared class←⊃⊃⎕class⎕this 
    :field private shared kafka
    :field private shared topic_conf
    
    ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
    ⍝ Constructor
      
    ∇ r←∆new;name
      :If 0=class.⎕NC name←'InitKafka'
          class.⎕NA'I4 ',sharedlib,'|',name,' >P'
      :EndIf
      r←(class.⍎name)1
      r←2⊃r
    ∇
    ∇ Make
      :Access Public
      :Implements constructor
      kafka←∆new
    ∇

    ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
    ⍝ Destructor
     
    ∇ r←∆del kafka;name
      :If 0=class.⎕NC name←'UninitKafka'
          class.⎕NA'I4 ',sharedlib,'|',name,' P'
      :EndIf
      r←(class.⍎name)kafka
    ∇
    ∇ Unmake
      :Implements destructor
      ∆del kafka
    ∇

    ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
    ⍝ Configuration Settings

    ∇ r←∆setconf(opt val);name
      :If 0=class.⎕NC name←'SetKafkaConf'
          class.⎕NA'I4 ',sharedlib,'|',name,' P <0T1 <0T1 >0T1 I4'
      :EndIf
      r←(class.⍎name)kafka opt val 512 512
      :If 0≠⊃r
          r←r
      :Else
          r←0 ''
      :EndIf
    ∇
    ∇ r←SetConfVal(opt val)
      :Access public
      r←∆setconf(opt val)
    ∇ 

    ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
    ⍝ Topic configuration, used by producer

    ∇ r←∆topicconf;name
      :If 0=class.⎕NC name←'NewTopicConf'
          class.⎕NA'I4 ',sharedlib,'|',name,' >P'
      :EndIf
      r←(class.⍎name)1
      r←2⊃r
    ∇
    ∇ TopicConf
      :Access Public
      topic_conf←∆topicconf
    ∇ 

    ∇ r←∆settopicconf(opt val);name
      :If 0=class.⎕NC name←'SetTopicConf'
          class.⎕NA'I4 ',sharedlib,'|',name,' P <0T1 <0T1 >0T1 I4'
      :EndIf
      r←(class.⍎name)topic_conf opt val 512 512
      :If 0≠⊃r
          r←r
      :Else
          r←0 ''
      :EndIf 
    ∇
    ∇ r←SetTopicConfVal(opt val)
      :Access public
      r←∆settopicconf opt val
    ∇ 
   
    ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
    ⍝ Set topic and partition given a list name, used by consumer
    ⍝ NB: it takes topic name, not topic handle

    ∇ r←∆newTP;name
      :If 0=class.⎕NC name←'NewTopicPartitionList'
          class.⎕NA'I4 ',sharedlib,'|',name,' >P'
      :EndIf
      r←(class.⍎name)1
      r←2⊃r
    ∇
    ∇ r←NewTopicPartition
      :Access public
      r←∆newTP
    ∇

    ∇ r←∆setTP(TPlist topicname partition);name
      :If 0=class.⎕NC name←'SetTopicPartitionList'
          class.⎕NA'I4 ',sharedlib,'|',name,' P <0T1 <I4'
      :EndIf
      r←(class.⍎name) TPlist topicname partition
      :If 0≠⊃r
          r←r
      :Else
          r←0 ''
      :EndIf
    ∇
    ∇ r←SetTopicPartition(TPlist topicname partiton)
      :Access public
      r←∆setTP TPlist topicname partiton
    ∇  

    ∇ r←∆subscribeConsTP TPlist;name
      :If 0=class.⎕NC name←'SubscribeConsumerTPList'
          class.⎕NA'I4 ',sharedlib,'|',name,' P P >0T1 I4'
      :EndIf
      r←(class.⍎name) kafka TPlist 512 512
      :If 0≠⊃r
          r←r
      :Else
          r←0 ''
      :EndIf
    ∇
    ∇ r←SubscribeConsTP  TPlist
      :Access public
      r←∆subscribeConsTP TPlist
    ∇ 

    ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
    ⍝ Producer 

    ∇ r←∆produce(topic_name payload);name
      :If 0=class.⎕NC name←'Produce'
          class.⎕NA'I4 ',sharedlib,'|',name,' P <0T1 P <0T1 >U8 >0T1 I4'
      :EndIf
      r←(class.⍎name)kafka topic_name topic_conf payload 1 512 512
    ∇
    ∇ r←Produce(topic_name payload);err;msgid;z
      :Access public
      (z msgid err)←∆produce(topic_name payload)
      r←z,msgid
    ∇

    ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
    ⍝ Delivery reports

    ∇ r←∆delivery length;name
      :If 0=class.⎕NC name←'DeliveryReport'
          class.⎕NA'I4 ',sharedlib,'|',name,' P >I8[] >I4[] =I4'
      :EndIf
      r←(class.⍎name)kafka length length length
    ∇ 
    ∇ r←DeliveryReport length;len;err;msgid;z
      :Access public
      (z msgid err len)←∆delivery(length)
      r←z,((len↑msgid),[1.5](len↑err))
    ∇

    ∇ r←∆errormsg errid;name
      :If 0=class.⎕NC name←'DRMessageError'
          class.⎕NA'I4 ',sharedlib,'|',name,' <I4 >0T1 I4'
      :EndIf
      r←(class.⍎name)errid 512 512
    ∇
    ∇ r←MessageError errid
      :Access public
      r←∆errormsg(errid)
    ∇
    
    ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
    ⍝ Consumer

    ∇ r←∆consume;name
      :If 0=class.⎕NC name←'Consume'
          class.⎕NA'I4 ',sharedlib,'|',name,' P >0T1 I4 >0T1 I4'
      :EndIf
      r←(class.⍎name)kafka 512 512 512 512
      :If 0≠⊃r
          r←r
      :Else
          r←3⊃r
      :EndIf
    ∇
    ∇ r←Consume
      :Access public
      r←∆consume
    ∇
   
    ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Helpers 
    ∇ r←GetKafka
      :Access public
      r←kafka
    ∇



      
      




:EndClass
