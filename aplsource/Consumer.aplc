:Class Consumer

    :field private shared sharedlib←'kafka'
    :field private cons
    :field private TPlist
    :field private shared class←⊃⊃⎕class⎕this

    ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
    ⍝ Constructor

    ∇ r←∆new;name
      :If 0=class.⎕NC name←'InitKafka'
          class.⎕NA'I4 ',sharedlib,'|',name,' >P'
      :EndIf
      r←(class.⍎name)1
      r←2⊃r
    ∇
    ∇ make config
      :Access Public
      :Implements constructor
      cons←∆new
      :For i :In ⍳≢config
          opt←⊃config[i;1]
          val←⊃config[i;2]
          ∆setconf(opt val)
      :EndFor
    ∇

    ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
    ⍝ Destructor

    ∇ r←∆del cons;name
      :If 0=class.⎕NC name←'UninitConsumer'
          class.⎕NA'I4 ',sharedlib,'|',name,' P'
      :EndIf
      r←(class.⍎name)cons
    ∇
    ∇ unmake
      :Implements destructor
      ∆del cons
    ∇

    ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
    ⍝ Configuration Settings

    ∇ r←∆setconf(opt val);name
      :If 0=class.⎕NC name←'SetKafkaConf'
          class.⎕NA'I4 ',sharedlib,'|',name,' P <0T1 <0T1 >0T1 I4'
      :EndIf
      r←(class.⍎name)cons opt val 512 512
      :If 0≠⊃r
          r←r
      :Else
          r←0 ''
      :EndIf
    ∇
    ∇ r←configure(opt val)
      :Access public
      r←∆setconf opt val
    ∇

    ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
    ⍝ Set topic and partition given a list name.
    ⍝ NB: it takes topic name, not topic handle

    ∇ r←∆newTP;name
      :If 0=class.⎕NC name←'NewTopicPartitionList'
          class.⎕NA'I4 ',sharedlib,'|',name,' >P'
      :EndIf
      r←(class.⍎name)1
      r←2⊃r
    ∇
    ∇ r←topic_partition
      :Access public
      r←∆newTP
    ∇

    ∇ r←∆setTP(TPlist topicname);name
      :If 0=class.⎕NC name←'SetTopicPartitionList'
          class.⎕NA'I4 ',sharedlib,'|',name,' P <0T1'
      :EndIf
      r←(class.⍎name)TPlist topicname
      :If 0≠⊃r
          r←r
      :Else
          r←0 ''
      :EndIf
    ∇
    ∇ r←set_topic_partition(TPlist topicname)
      :Access public
      r←∆setTP TPlist topicname
    ∇

    ∇ r←∆subscribeTP TPlist;name
      :If 0=class.⎕NC name←'SubscribeConsumerTPList'
          class.⎕NA'I4 ',sharedlib,'|',name,' P P >0T1 I4'
      :EndIf
      r←(class.⍎name)cons TPlist 512 512
      :If 0≠⊃r
          r←r
      :Else
          r←0 ''
      :EndIf
    ∇
    ∇ r←subscribeTP TPlist
      :Access public
      r←∆subscribeTP TPlist
    ∇

    ∇ r←subscribe topic_list;topic;TPlist
      :Access public
      TPlist←∆newTP
      :If 0≠≢topic_list
          :For i :In ⍳≢topic_list
              topic←⊃topic_list[i]
              ∆setTP(TPlist topic)
          :EndFor
      :EndIf
      r←∆subscribeTP TPlist
    ∇

    ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
    ⍝ Consumer
    ∇ r←∆consume;name
      :If 0=class.⎕NC name←'Consume'
          class.⎕NA'I4 ',sharedlib,'|',name,' P >0T1 >0T1 I4'
      :EndIf
      r←(class.⍎name)cons 512 512 512
      :If 0≠⊃r
          r←'err'
      :Else
          r←3⊃r
      :EndIf
    ∇
    ∇ r←consume
      :Access public
      r←∆consume
    ∇

    ∇ r←∆consume1(tl pl kl);name
      :If 0=class.⎕NC name←'Consume1'
          class.⎕NA'I4 ',sharedlib,'|',name,' P >0T1 =U4 >0T1 =U4 >0T1 =U4 >U4 >0T1 I4'
      :EndIf
      r←(class.⍎name)cons tl tl pl pl kl kl 1 512 512
      :Select ⊃r
      :Case 0   ⍝ we got a message
          r←0,(r[3 5 7]↑¨r[2 4 6]),8⊃r
      :Case 1   ⍝ no message
          r←r[1 9]
      :Case 2   ⍝ we are need more space
          r←∆consume1 10+r[3 5 7]
      :Else    ⍝ Kafka error
          r←r[1 9]
      :EndSelect
    ∇


    ∇ r←consume_rec
      :Access public
      r←∆consume1 200 2048 200
      :If 0=⊃r
          r←0(⎕NEW #.Record(r[2 3 4 5]))
      :EndIf
    ∇


    ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
    ⍝ Helpers
    ∇ r←get_consumer
      :Access public
      r←cons
    ∇

:EndClass
